"""
Задание 3.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух) разной!! сложности
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Задание творческое. Здесь нет жестких требований к выполнению.
"""

# Решение №1
import copy


# принято за основу, что нам не известен размер словаря

# сложность Решения №1  O(n)- линейная

# сложность функции min_1() O(n)- линейная
def min_1(storage):
    min_profit = list(storage.values())[0]    # O(n)- линейная (так как сложность list() зависит от длины)
    for i in storage.values():                # O(n)- линейная
        if i < min_profit:                    # O(1)- константная
            min_profit = i                    # O(1)- константная
    for i, j in storage.items():              # O(n)- линейная
        if j == min_profit:                   # O(1)- константная
            name = i                          # O(1)- константная
    return name                               # O(1)- константная


# # сложность функции print_name() O(n)- линейная
def print_name(storage):
    storage_copy = copy.copy(storage)         # O(n) - линейная
    for i in range(3):                        # O(1) - константная
        name = min_1(storage_copy)            # O(n) - линейная
        print(name)                           # O(1) - константная
        storage_copy.pop(name)                # O(1) - константная


# пример хранилиша с данными
storage = {'Fresh Books': 10000, 'Shopify': 20000, 'Name Mesh': 30000, 'Brandroot': 40000, 'Teachworks': 50000,
           'Getsocio': 60000, 'Word Lab': 70000, 'Panabee': 80000, 'BrandBucket': 90000}

# вывод результата
result = print_name(storage)


# Решение №2

# сложность Решения №2  O(n^2)- квадратичная

# сложность функции name_company_min_profit() - O(n^2)- квадратичная - из-за вложенности циклов
def name_company_min_profit(storage):
    min_num = list(storage.values())[0]               # O(n) - линейная
    name = list(storage.keys())[0]                    # O(n) - линейная
    for i, j in storage.items():                      # O(n) - линейная
        for _, k in storage.items():                  # O(n) - линейная
            if j < k and j < min_num:                 # O(1) - константная
                min_num = j                           # O(1) - константная
                name = i                              # O(1) - константная

    return name  # O(1) - константная


storage1 = {'Fresh Books': 10000, 'Shopify': 20000, 'Name Mesh': 30000, 'Brandroot': 40000,
            'Teachworks': 50000,'Getsocio': 60000, 'Word Lab': 70000, 'Panabee': 80000, 'BrandBucket': 90000}

storage1_copy = copy.copy(storage1)                   # O(n) - линейная
for i in range(3):                                    # O(1) - константная
    name_c = name_company_min_profit(storage1_copy)   # O(n^2)- квадратичная
    print(name_c)                                     # O(1) - константная
    storage1_copy.pop(name_c)                         # O(1) - константная

# Вывод: решение №1 наиболее эффективно так как сложность линейная, решение №2 имеет квадратичную сложность
# и при большом объеме данных время выполнения скрипта значительно увеличится в отличие от решения №1
